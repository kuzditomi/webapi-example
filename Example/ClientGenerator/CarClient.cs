//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.5.1.0 (NJsonSchema v9.5.0.0) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Example
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.5.1.0")]
    public partial class CarClient 
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        private string _baseUrl = "http://localhost:49530";
        
        public CarClient()
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get all cars</summary>
        /// <param name="plateNumber">String to be included in car's plate number</param>
        /// <param name="color">Only color to filter to</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Car>> GetCarsAsync(string plateNumber, Color? color)
        {
            return GetCarsAsync(plateNumber, color, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get all cars</summary>
        /// <param name="plateNumber">String to be included in car's plate number</param>
        /// <param name="color">Only color to filter to</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Car>> GetCarsAsync(string plateNumber, Color? color, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/cars?");
            if (plateNumber != null) urlBuilder_.Append("plateNumber=").Append(System.Uri.EscapeDataString(System.Convert.ToString(plateNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (color != null) urlBuilder_.Append("color=").Append(System.Uri.EscapeDataString(System.Convert.ToString(color.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Car>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Car>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Car>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add car to the system</summary>
        /// <param name="car">Car to create</param>
        /// <returns>Returns the created car</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Car> AddCarAsync(CreateCar car)
        {
            return AddCarAsync(car, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Add car to the system</summary>
        /// <param name="car">Car to create</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Returns the created car</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Car> AddCarAsync(CreateCar car, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/cars");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(car, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Car); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Car>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.Dictionary<string, ModelState>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, ModelState>>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                            throw new SwaggerException<System.Collections.Generic.Dictionary<string, ModelState>>("If the request model is invalid", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Car);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get car by it's id in the system</summary>
        /// <param name="id">Id of car in system</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Car> GetCarByIdAsync(int id)
        {
            return GetCarByIdAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get car by it's id in the system</summary>
        /// <param name="id">Id of car in system</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Car> GetCarByIdAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/cars/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Car); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Car>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("NotFound", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Car);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
    }
    
    

    /// <summary>Filter type for car filering</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.5.0.0")]
    public partial class CarFilterViewModel : System.ComponentModel.INotifyPropertyChanged
    {
        private string _plateNumber;
        private CarFilterViewModelColor? _color;
    
        /// <summary>String to be included in car's plate number</summary>
        [Newtonsoft.Json.JsonProperty("PlateNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNumber
        {
            get { return _plateNumber; }
            set 
            {
                if (_plateNumber != value)
                {
                    _plateNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Only color to filter to</summary>
        [Newtonsoft.Json.JsonProperty("Color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CarFilterViewModelColor? Color
        {
            get { return _color; }
            set 
            {
                if (_color != value)
                {
                    _color = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CarFilterViewModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CarFilterViewModel>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Car</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.5.0.0")]
    public partial class Car : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _plateNumber;
        private CarColor? _color;
    
        /// <summary>Numeric id of the car</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Plate number of car, format: ABC-123</summary>
        [Newtonsoft.Json.JsonProperty("PlateNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNumber
        {
            get { return _plateNumber; }
            set 
            {
                if (_plateNumber != value)
                {
                    _plateNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Registered color of the car</summary>
        [Newtonsoft.Json.JsonProperty("Color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CarColor? Color
        {
            get { return _color; }
            set 
            {
                if (_color != value)
                {
                    _color = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Car FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Car>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Car</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.5.0.0")]
    public partial class CreateCar : System.ComponentModel.INotifyPropertyChanged
    {
        private string _plateNumber;
        private CreateCarColor _color;
    
        /// <summary>Plate number of car, format: ABC-123</summary>
        [Newtonsoft.Json.JsonProperty("PlateNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}-[0-9]{3}")]
        public string PlateNumber
        {
            get { return _plateNumber; }
            set 
            {
                if (_plateNumber != value)
                {
                    _plateNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Registered color of the car</summary>
        [Newtonsoft.Json.JsonProperty("Color", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateCarColor Color
        {
            get { return _color; }
            set 
            {
                if (_color != value)
                {
                    _color = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateCar FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateCar>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.5.0.0")]
    public partial class ModelState : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<ModelError> __errors;
        private ValueProviderResult _<Value>k__BackingField;
    
        [Newtonsoft.Json.JsonProperty("_errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ModelError> _errors
        {
            get { return __errors; }
            set 
            {
                if (__errors != value)
                {
                    __errors = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("<Value>k__BackingField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueProviderResult <Value>k__BackingField
        {
            get { return _<Value>k__BackingField; }
            set 
            {
                if (_<Value>k__BackingField != value)
                {
                    _<Value>k__BackingField = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ModelState FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelState>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.5.0.0")]
    public partial class ModelError : System.ComponentModel.INotifyPropertyChanged
    {
        private object _<Exception>k__BackingField;
        private string _<ErrorMessage>k__BackingField;
    
        [Newtonsoft.Json.JsonProperty("<Exception>k__BackingField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object <Exception>k__BackingField
        {
            get { return _<Exception>k__BackingField; }
            set 
            {
                if (_<Exception>k__BackingField != value)
                {
                    _<Exception>k__BackingField = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("<ErrorMessage>k__BackingField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string <ErrorMessage>k__BackingField
        {
            get { return _<ErrorMessage>k__BackingField; }
            set 
            {
                if (_<ErrorMessage>k__BackingField != value)
                {
                    _<ErrorMessage>k__BackingField = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ModelError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelError>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.5.0.0")]
    public partial class ValueProviderResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string __instanceCulture;
        private string _<AttemptedValue>k__BackingField;
        private object _<RawValue>k__BackingField;
    
        [Newtonsoft.Json.JsonProperty("_instanceCulture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _instanceCulture
        {
            get { return __instanceCulture; }
            set 
            {
                if (__instanceCulture != value)
                {
                    __instanceCulture = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("<AttemptedValue>k__BackingField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string <AttemptedValue>k__BackingField
        {
            get { return _<AttemptedValue>k__BackingField; }
            set 
            {
                if (_<AttemptedValue>k__BackingField != value)
                {
                    _<AttemptedValue>k__BackingField = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("<RawValue>k__BackingField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object <RawValue>k__BackingField
        {
            get { return _<RawValue>k__BackingField; }
            set 
            {
                if (_<RawValue>k__BackingField != value)
                {
                    _<RawValue>k__BackingField = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ValueProviderResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValueProviderResult>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Only color to filter to</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.5.0.0")]
    public enum Color
    {
        [System.Runtime.Serialization.EnumMember(Value = "Red")]
        Red = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Green")]
        Green = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Blue")]
        Blue = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.5.0.0")]
    public enum CarFilterViewModelColor
    {
        [System.Runtime.Serialization.EnumMember(Value = "Red")]
        Red = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Green")]
        Green = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Blue")]
        Blue = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.5.0.0")]
    public enum CarColor
    {
        [System.Runtime.Serialization.EnumMember(Value = "Red")]
        Red = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Green")]
        Green = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Blue")]
        Blue = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.5.0.0")]
    public enum CreateCarColor
    {
        [System.Runtime.Serialization.EnumMember(Value = "Red")]
        Red = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Green")]
        Green = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Blue")]
        Blue = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.5.1.0")]
    public class SwaggerException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.5.1.0")]
    public class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}